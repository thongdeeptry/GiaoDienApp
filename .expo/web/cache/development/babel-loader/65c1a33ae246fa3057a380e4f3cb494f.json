{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _Reanimated$default$c, _Reanimated$default;\n\nimport React, { useEffect, useRef } from 'react';\nimport { BaseGesture, CALLBACK_TYPE } from \"./gesture\";\nimport { Reanimated } from \"./reanimatedWrapper\";\nimport { registerHandler, unregisterHandler } from \"../handlersRegistry\";\nimport RNGestureHandlerModule from \"../../RNGestureHandlerModule\";\nimport { baseGestureHandlerWithMonitorProps, filterConfig, findNodeHandle } from \"../gestureHandlerCommon\";\nimport { GestureStateManager } from \"./gestureStateManager\";\nimport { flingGestureHandlerProps } from \"../FlingGestureHandler\";\nimport { forceTouchGestureHandlerProps } from \"../ForceTouchGestureHandler\";\nimport { longPressGestureHandlerProps } from \"../LongPressGestureHandler\";\nimport { panGestureHandlerProps, panGestureHandlerCustomNativeProps } from \"../PanGestureHandler\";\nimport { tapGestureHandlerProps } from \"../TapGestureHandler\";\nimport { State } from \"../../State\";\nimport { EventType } from \"../../EventType\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { onGestureHandlerEvent as _onGestureHandlerEvent } from \"./eventReceiver\";\nvar ALLOWED_PROPS = [].concat(_toConsumableArray(baseGestureHandlerWithMonitorProps), _toConsumableArray(tapGestureHandlerProps), _toConsumableArray(panGestureHandlerProps), _toConsumableArray(panGestureHandlerCustomNativeProps), _toConsumableArray(longPressGestureHandlerProps), _toConsumableArray(forceTouchGestureHandlerProps), _toConsumableArray(flingGestureHandlerProps));\n\nfunction convertToHandlerTag(ref) {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    var _ref$current$handlerT, _ref$current;\n\n    return (_ref$current$handlerT = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.handlerTag) !== null && _ref$current$handlerT !== void 0 ? _ref$current$handlerT : -1;\n  }\n}\n\nfunction extractValidHandlerTags(interactionGroup) {\n  var _interactionGroup$map, _interactionGroup$map2;\n\n  return (_interactionGroup$map = interactionGroup === null || interactionGroup === void 0 ? void 0 : (_interactionGroup$map2 = interactionGroup.map(convertToHandlerTag)) === null || _interactionGroup$map2 === void 0 ? void 0 : _interactionGroup$map2.filter(function (tag) {\n    return tag > 0;\n  })) !== null && _interactionGroup$map !== void 0 ? _interactionGroup$map : [];\n}\n\nfunction dropHandlers(preparedGesture) {\n  for (var _iterator = _createForOfIteratorHelperLoose(preparedGesture.config), _step; !(_step = _iterator()).done;) {\n    var handler = _step.value;\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n    unregisterHandler(handler.handlerTag);\n  }\n}\n\nfunction attachHandlers(_ref) {\n  var preparedGesture = _ref.preparedGesture,\n      gestureConfig = _ref.gestureConfig,\n      gesture = _ref.gesture,\n      viewTag = _ref.viewTag,\n      useAnimated = _ref.useAnimated,\n      webEventHandlersRef = _ref.webEventHandlersRef;\n\n  if (!preparedGesture.firstExecution) {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n\n  setImmediate(function () {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n  });\n\n  var _loop = function _loop(handler) {\n    RNGestureHandlerModule.createGestureHandler(handler.handlerName, handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS));\n    registerHandler(handler.handlerTag, handler);\n    setImmediate(function () {\n      var requireToFail = [];\n\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n\n      var simultaneousWith = [];\n\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(handler.config.simultaneousWith);\n      }\n\n      RNGestureHandlerModule.updateGestureHandler(handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n    });\n  };\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(gesture), _step2; !(_step2 = _iterator2()).done;) {\n    var handler = _step2.value;\n\n    _loop(handler);\n  }\n\n  preparedGesture.config = gesture;\n\n  for (var _iterator3 = _createForOfIteratorHelperLoose(preparedGesture.config), _step3; !(_step3 = _iterator3()).done;) {\n    var _gesture = _step3.value;\n\n    if (Platform.OS === 'web') {\n      RNGestureHandlerModule.attachGestureHandler(_gesture.handlerTag, viewTag, !useAnimated, webEventHandlersRef);\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(_gesture.handlerTag, viewTag, !useAnimated);\n    }\n  }\n\n  if (preparedGesture.animatedHandlers) {\n    preparedGesture.animatedHandlers.value = gesture.map(function (g) {\n      return g.handlers;\n    });\n  }\n}\n\nfunction updateHandlers(preparedGesture, gestureConfig, gesture) {\n  gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n\n  for (var i = 0; i < gesture.length; i++) {\n    var handler = preparedGesture.config[i];\n\n    if (gesture[i].handlerTag !== handler.handlerTag) {\n      gesture[i].handlerTag = handler.handlerTag;\n      gesture[i].handlers.handlerTag = handler.handlerTag;\n    }\n  }\n\n  setImmediate(function () {\n    for (var _i = 0; _i < gesture.length; _i++) {\n      var _handler = preparedGesture.config[_i];\n      _handler.config = gesture[_i].config;\n      _handler.handlers = gesture[_i].handlers;\n      var requireToFail = extractValidHandlerTags(_handler.config.requireToFail);\n      var simultaneousWith = extractValidHandlerTags(_handler.config.simultaneousWith);\n      RNGestureHandlerModule.updateGestureHandler(_handler.handlerTag, filterConfig(_handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n      registerHandler(_handler.handlerTag, _handler);\n    }\n\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = preparedGesture.config.map(function (g) {\n        return g.handlers;\n      });\n    }\n  });\n}\n\nfunction needsToReattach(preparedGesture, gesture) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n\n  for (var i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction useAnimatedGesture(preparedGesture, needsRebuild) {\n  if (!Reanimated) {\n    return;\n  }\n\n  function isStateChangeEvent(event) {\n    'worklet';\n\n    return event.oldState != null;\n  }\n\n  function isTouchEvent(event) {\n    'worklet';\n\n    return event.eventType != null;\n  }\n\n  function getHandler(type, gesture) {\n    'worklet';\n\n    switch (type) {\n      case CALLBACK_TYPE.BEGAN:\n        return gesture.onBegin;\n\n      case CALLBACK_TYPE.START:\n        return gesture.onStart;\n\n      case CALLBACK_TYPE.UPDATE:\n        return gesture.onUpdate;\n\n      case CALLBACK_TYPE.CHANGE:\n        return gesture.onChange;\n\n      case CALLBACK_TYPE.END:\n        return gesture.onEnd;\n\n      case CALLBACK_TYPE.FINALIZE:\n        return gesture.onFinalize;\n\n      case CALLBACK_TYPE.TOUCHES_DOWN:\n        return gesture.onTouchesDown;\n\n      case CALLBACK_TYPE.TOUCHES_MOVE:\n        return gesture.onTouchesMove;\n\n      case CALLBACK_TYPE.TOUCHES_UP:\n        return gesture.onTouchesUp;\n\n      case CALLBACK_TYPE.TOUCHES_CANCELLED:\n        return gesture.onTouchesCancelled;\n    }\n  }\n\n  function touchEventTypeToCallbackType(eventType) {\n    'worklet';\n\n    switch (eventType) {\n      case EventType.TOUCHES_DOWN:\n        return CALLBACK_TYPE.TOUCHES_DOWN;\n\n      case EventType.TOUCHES_MOVE:\n        return CALLBACK_TYPE.TOUCHES_MOVE;\n\n      case EventType.TOUCHES_UP:\n        return CALLBACK_TYPE.TOUCHES_UP;\n\n      case EventType.TOUCHES_CANCELLED:\n        return CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n\n    return CALLBACK_TYPE.UNDEFINED;\n  }\n\n  function runWorklet(type, gesture, event) {\n    'worklet';\n\n    var handler = getHandler(type, gesture);\n\n    if (gesture.isWorklet[type]) {\n      for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n        args[_key - 3] = arguments[_key];\n      }\n\n      handler === null || handler === void 0 ? void 0 : handler.apply(void 0, [event].concat(args));\n    } else if (handler) {\n      console.warn('Animated gesture callback must be a worklet');\n    }\n  }\n\n  var sharedHandlersCallbacks = Reanimated.useSharedValue(null);\n  var lastUpdateEvent = Reanimated.useSharedValue([]);\n  var stateControllers = [];\n\n  var callback = function callback(event) {\n    'worklet';\n\n    var currentCallback = sharedHandlersCallbacks.value;\n\n    if (!currentCallback) {\n      return;\n    }\n\n    for (var i = 0; i < currentCallback.length; i++) {\n      var gesture = currentCallback[i];\n\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (event.oldState === State.UNDETERMINED && event.state === State.BEGAN) {\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if ((event.oldState === State.BEGAN || event.oldState === State.UNDETERMINED) && event.state === State.ACTIVE) {\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (event.oldState !== event.state && event.state === State.END) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n            }\n\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if ((event.state === State.FAILED || event.state === State.CANCELLED) && event.state !== event.oldState) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n            }\n\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\n          }\n\n          if (event.eventType !== EventType.UNDETERMINED) {\n            runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);\n          }\n        } else {\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            var _gesture$changeEventC;\n\n            runWorklet(CALLBACK_TYPE.CHANGE, gesture, (_gesture$changeEventC = gesture.changeEventCalculator) === null || _gesture$changeEventC === void 0 ? void 0 : _gesture$changeEventC.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n\n  var event = Reanimated.useEvent(callback, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], needsRebuild);\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\n\nexport var GestureDetector = function GestureDetector(props) {\n  var _gestureConfig$toGest, _gestureConfig$toGest2;\n\n  var gestureConfig = props.gesture;\n  var gesture = (_gestureConfig$toGest = gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$toGest2 = gestureConfig.toGestureArray) === null || _gestureConfig$toGest2 === void 0 ? void 0 : _gestureConfig$toGest2.call(gestureConfig)) !== null && _gestureConfig$toGest !== void 0 ? _gestureConfig$toGest : [];\n  var useAnimated = gesture.find(function (gesture) {\n    return gesture.handlers.isWorklet.reduce(function (prev, current) {\n      return prev || current;\n    });\n  }) != null;\n  var viewRef = useRef(null);\n  var firstRenderRef = useRef(true);\n  var webEventHandlersRef = useRef({\n    onGestureHandlerEvent: function onGestureHandlerEvent(e) {\n      _onGestureHandlerEvent(e.nativeEvent);\n    }\n  });\n  var preparedGesture = React.useRef({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useAnimated: useAnimated\n  }).current;\n\n  if (useAnimated !== preparedGesture.useAnimated) {\n    throw new Error('You cannot change whether you are using gesture or animatedGesture while the app is running');\n  }\n\n  var needsToRebuildReanimatedEvent = preparedGesture.firstExecution || needsToReattach(preparedGesture, gesture);\n\n  if (preparedGesture.firstExecution) {\n    var _gestureConfig$initia;\n\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$initia = gestureConfig.initialize) === null || _gestureConfig$initia === void 0 ? void 0 : _gestureConfig$initia.call(gestureConfig);\n  }\n\n  if (useAnimated) {\n    useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);\n  }\n\n  useEffect(function () {\n    firstRenderRef.current = true;\n    var viewTag = findNodeHandle(viewRef.current);\n    attachHandlers({\n      preparedGesture: preparedGesture,\n      gestureConfig: gestureConfig,\n      gesture: gesture,\n      viewTag: viewTag,\n      useAnimated: useAnimated,\n      webEventHandlersRef: webEventHandlersRef\n    });\n    return function () {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n  useEffect(function () {\n    if (!firstRenderRef.current) {\n      var viewTag = findNodeHandle(viewRef.current);\n\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture: preparedGesture,\n          gestureConfig: gestureConfig,\n          gesture: gesture,\n          viewTag: viewTag,\n          useAnimated: useAnimated,\n          webEventHandlersRef: webEventHandlersRef\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n\n  if (useAnimated) {\n    return React.createElement(AnimatedWrap, {\n      ref: viewRef,\n      onGestureHandlerEvent: preparedGesture.animatedEventHandler\n    }, props.children);\n  } else {\n    return React.createElement(Wrap, {\n      ref: viewRef\n    }, props.children);\n  }\n};\n\nvar Wrap = function (_React$Component) {\n  _inherits(Wrap, _React$Component);\n\n  var _super = _createSuper(Wrap);\n\n  function Wrap() {\n    _classCallCheck(this, Wrap);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Wrap, [{\n    key: \"render\",\n    value: function render() {\n      var child = React.Children.only(this.props.children);\n      return React.cloneElement(child, {\n        collapsable: false\n      }, child.props.children);\n    }\n  }]);\n\n  return Wrap;\n}(React.Component);\n\nvar AnimatedWrap = (_Reanimated$default$c = Reanimated === null || Reanimated === void 0 ? void 0 : (_Reanimated$default = Reanimated.default) === null || _Reanimated$default === void 0 ? void 0 : _Reanimated$default.createAnimatedComponent(Wrap)) !== null && _Reanimated$default$c !== void 0 ? _Reanimated$default$c : Wrap;","map":{"version":3,"mappings":"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","names":["React","useEffect","useRef","BaseGesture","CALLBACK_TYPE","Reanimated","registerHandler","unregisterHandler","RNGestureHandlerModule","baseGestureHandlerWithMonitorProps","filterConfig","findNodeHandle","GestureStateManager","flingGestureHandlerProps","forceTouchGestureHandlerProps","longPressGestureHandlerProps","panGestureHandlerProps","panGestureHandlerCustomNativeProps","tapGestureHandlerProps","State","EventType","onGestureHandlerEvent","ALLOWED_PROPS","convertToHandlerTag","ref","handlerTag","current","_ref$current","extractValidHandlerTags","interactionGroup","map","_interactionGroup$map2","filter","tag","dropHandlers","preparedGesture","config","handler","dropGestureHandler","attachHandlers","gestureConfig","gesture","viewTag","useAnimated","webEventHandlersRef","firstExecution","initialize","setImmediate","prepare","createGestureHandler","handlerName","requireToFail","simultaneousWith","updateGestureHandler","simultaneousHandlers","waitFor","Platform","OS","attachGestureHandler","animatedHandlers","value","g","handlers","updateHandlers","i","length","needsToReattach","useAnimatedGesture","needsRebuild","isStateChangeEvent","event","oldState","isTouchEvent","eventType","getHandler","type","BEGAN","onBegin","START","onStart","UPDATE","onUpdate","CHANGE","onChange","END","onEnd","FINALIZE","onFinalize","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","touchEventTypeToCallbackType","UNDEFINED","runWorklet","isWorklet","args","console","warn","sharedHandlersCallbacks","useSharedValue","lastUpdateEvent","stateControllers","callback","currentCallback","UNDETERMINED","state","ACTIVE","undefined","FAILED","CANCELLED","create","changeEventCalculator","_gesture$changeEventC","useEvent","animatedEventHandler","GestureDetector","props","toGestureArray","_gestureConfig$toGest2","find","reduce","prev","viewRef","firstRenderRef","e","nativeEvent","Error","needsToRebuildReanimatedEvent","AnimatedWrap","children","Wrap","render","child","Children","only","cloneElement","collapsable","Component","default","_Reanimated$default","createAnimatedComponent"],"sources":["GestureDetector.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {\n  GestureType,\n  HandlerCallbacks,\n  BaseGesture,\n  GestureRef,\n  CALLBACK_TYPE,\n} from './gesture';\nimport { Reanimated, SharedValue } from './reanimatedWrapper';\nimport { registerHandler, unregisterHandler } from '../handlersRegistry';\nimport RNGestureHandlerModule from '../../RNGestureHandlerModule';\nimport {\n  baseGestureHandlerWithMonitorProps,\n  filterConfig,\n  findNodeHandle,\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n  HandlerStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\nimport { flingGestureHandlerProps } from '../FlingGestureHandler';\nimport { forceTouchGestureHandlerProps } from '../ForceTouchGestureHandler';\nimport { longPressGestureHandlerProps } from '../LongPressGestureHandler';\nimport {\n  panGestureHandlerProps,\n  panGestureHandlerCustomNativeProps,\n} from '../PanGestureHandler';\nimport { tapGestureHandlerProps } from '../TapGestureHandler';\nimport { State } from '../../State';\nimport { EventType } from '../../EventType';\nimport { ComposedGesture } from './gestureComposition';\nimport { Platform } from 'react-native';\nimport type RNGestureHandlerModuleWeb from '../../RNGestureHandlerModule.web';\nimport { onGestureHandlerEvent } from './eventReceiver';\n\nconst ALLOWED_PROPS = [\n  ...baseGestureHandlerWithMonitorProps,\n  ...tapGestureHandlerProps,\n  ...panGestureHandlerProps,\n  ...panGestureHandlerCustomNativeProps,\n  ...longPressGestureHandlerProps,\n  ...forceTouchGestureHandlerProps,\n  ...flingGestureHandlerProps,\n];\n\nexport type GestureConfigReference = {\n  config: GestureType[];\n  animatedEventHandler: unknown;\n  animatedHandlers: SharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  > | null;\n  firstExecution: boolean;\n  useAnimated: boolean;\n};\n\nfunction convertToHandlerTag(ref: GestureRef): number {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    // @ts-ignore in this case it should be a ref either to gesture object or\n    // a gesture handler component, in both cases handlerTag property exists\n    return ref.current?.handlerTag ?? -1;\n  }\n}\n\nfunction extractValidHandlerTags(interactionGroup: GestureRef[] | undefined) {\n  return (\n    interactionGroup?.map(convertToHandlerTag)?.filter((tag) => tag > 0) ?? []\n  );\n}\n\nfunction dropHandlers(preparedGesture: GestureConfigReference) {\n  for (const handler of preparedGesture.config) {\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n\n    unregisterHandler(handler.handlerTag);\n  }\n}\n\ninterface WebEventHandler {\n  onGestureHandlerEvent: (event: HandlerStateChangeEvent<unknown>) => void;\n}\n\ninterface AttachHandlersConfig {\n  preparedGesture: GestureConfigReference;\n  gestureConfig: ComposedGesture | GestureType | undefined;\n  gesture: GestureType[];\n  viewTag: number;\n  useAnimated: boolean;\n  webEventHandlersRef: React.RefObject<WebEventHandler>;\n}\n\nfunction attachHandlers({\n  preparedGesture,\n  gestureConfig,\n  gesture,\n  viewTag,\n  useAnimated,\n  webEventHandlersRef,\n}: AttachHandlersConfig) {\n  if (!preparedGesture.firstExecution) {\n    gestureConfig?.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n\n  // use setImmediate to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  setImmediate(() => {\n    gestureConfig?.prepare();\n  });\n\n  for (const handler of gesture) {\n    RNGestureHandlerModule.createGestureHandler(\n      handler.handlerName,\n      handler.handlerTag,\n      filterConfig(handler.config, ALLOWED_PROPS)\n    );\n\n    registerHandler(handler.handlerTag, handler);\n\n    // use setImmediate to extract handlerTags, because all refs should be initialized\n    // when it's ran\n    setImmediate(() => {\n      let requireToFail: number[] = [];\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n\n      let simultaneousWith: number[] = [];\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(\n          handler.config.simultaneousWith\n        );\n      }\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n    });\n  }\n  preparedGesture.config = gesture;\n\n  for (const gesture of preparedGesture.config) {\n    if (Platform.OS === 'web') {\n      (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n        gesture.handlerTag,\n        viewTag,\n        !useAnimated, // send direct events when using animatedGesture, device events otherwise\n        webEventHandlersRef\n      );\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(\n        gesture.handlerTag,\n        viewTag,\n        !useAnimated // send direct events when using animatedGesture, device events otherwise\n      );\n    }\n  }\n\n  if (preparedGesture.animatedHandlers) {\n    preparedGesture.animatedHandlers.value = (gesture.map(\n      (g) => g.handlers\n    ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\n  }\n}\n\nfunction updateHandlers(\n  preparedGesture: GestureConfigReference,\n  gestureConfig: ComposedGesture | GestureType | undefined,\n  gesture: GestureType[]\n) {\n  gestureConfig?.prepare();\n\n  for (let i = 0; i < gesture.length; i++) {\n    const handler = preparedGesture.config[i];\n\n    // only update handlerTag when it's actually different, it may be the same\n    // if gesture config object is wrapped with useMemo\n    if (gesture[i].handlerTag !== handler.handlerTag) {\n      gesture[i].handlerTag = handler.handlerTag;\n      gesture[i].handlers.handlerTag = handler.handlerTag;\n    }\n  }\n\n  // use setImmediate to extract handlerTags, because when it's ran, all refs should be updated\n  // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n  // in case of external relations)\n  setImmediate(() => {\n    for (let i = 0; i < gesture.length; i++) {\n      const handler = preparedGesture.config[i];\n\n      handler.config = gesture[i].config;\n      handler.handlers = gesture[i].handlers;\n\n      const requireToFail = extractValidHandlerTags(\n        handler.config.requireToFail\n      );\n\n      const simultaneousWith = extractValidHandlerTags(\n        handler.config.simultaneousWith\n      );\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n\n      registerHandler(handler.handlerTag, handler);\n    }\n\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = (preparedGesture.config.map(\n        (g) => g.handlers\n      ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\n    }\n  });\n}\n\nfunction needsToReattach(\n  preparedGesture: GestureConfigReference,\n  gesture: GestureType[]\n) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n  for (let i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction useAnimatedGesture(\n  preparedGesture: GestureConfigReference,\n  needsRebuild: boolean\n) {\n  if (!Reanimated) {\n    return;\n  }\n\n  function isStateChangeEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureStateChangeEvent {\n    'worklet';\n    // @ts-ignore Yes, the oldState prop is missing on GestureTouchEvent, that's the point\n    return event.oldState != null;\n  }\n\n  function isTouchEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureTouchEvent {\n    'worklet';\n    return event.eventType != null;\n  }\n\n  function getHandler(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>\n  ) {\n    'worklet';\n    switch (type) {\n      case CALLBACK_TYPE.BEGAN:\n        return gesture.onBegin;\n      case CALLBACK_TYPE.START:\n        return gesture.onStart;\n      case CALLBACK_TYPE.UPDATE:\n        return gesture.onUpdate;\n      case CALLBACK_TYPE.CHANGE:\n        return gesture.onChange;\n      case CALLBACK_TYPE.END:\n        return gesture.onEnd;\n      case CALLBACK_TYPE.FINALIZE:\n        return gesture.onFinalize;\n      case CALLBACK_TYPE.TOUCHES_DOWN:\n        return gesture.onTouchesDown;\n      case CALLBACK_TYPE.TOUCHES_MOVE:\n        return gesture.onTouchesMove;\n      case CALLBACK_TYPE.TOUCHES_UP:\n        return gesture.onTouchesUp;\n      case CALLBACK_TYPE.TOUCHES_CANCELLED:\n        return gesture.onTouchesCancelled;\n    }\n  }\n\n  function touchEventTypeToCallbackType(eventType: EventType): CALLBACK_TYPE {\n    'worklet';\n    switch (eventType) {\n      case EventType.TOUCHES_DOWN:\n        return CALLBACK_TYPE.TOUCHES_DOWN;\n      case EventType.TOUCHES_MOVE:\n        return CALLBACK_TYPE.TOUCHES_MOVE;\n      case EventType.TOUCHES_UP:\n        return CALLBACK_TYPE.TOUCHES_UP;\n      case EventType.TOUCHES_CANCELLED:\n        return CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n    return CALLBACK_TYPE.UNDEFINED;\n  }\n\n  function runWorklet(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>,\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent,\n    ...args: any[]\n  ) {\n    'worklet';\n    const handler = getHandler(type, gesture);\n    if (gesture.isWorklet[type]) {\n      // @ts-ignore Logic below makes sure the correct event is send to the\n      // correct handler.\n      handler?.(event, ...args);\n    } else if (handler) {\n      console.warn('Animated gesture callback must be a worklet');\n    }\n  }\n\n  // Hooks are called conditionally, but the condition is whether the\n  // react-native-reanimated is installed, which shouldn't change while running\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const sharedHandlersCallbacks = Reanimated.useSharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  >(null);\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const lastUpdateEvent = Reanimated.useSharedValue<\n    (GestureUpdateEvent | undefined)[]\n  >([]);\n\n  // not every gesture needs a state controller, init them lazily\n  const stateControllers: GestureStateManagerType[] = [];\n\n  const callback = (\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent\n  ) => {\n    'worklet';\n\n    const currentCallback = sharedHandlersCallbacks.value;\n    if (!currentCallback) {\n      return;\n    }\n\n    for (let i = 0; i < currentCallback.length; i++) {\n      const gesture = currentCallback[i];\n\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (\n            event.oldState === State.UNDETERMINED &&\n            event.state === State.BEGAN\n          ) {\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if (\n            (event.oldState === State.BEGAN ||\n              event.oldState === State.UNDETERMINED) &&\n            event.state === State.ACTIVE\n          ) {\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (\n            event.oldState !== event.state &&\n            event.state === State.END\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if (\n            (event.state === State.FAILED || event.state === State.CANCELLED) &&\n            event.state !== event.oldState\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\n          }\n\n          if (event.eventType !== EventType.UNDETERMINED) {\n            runWorklet(\n              touchEventTypeToCallbackType(event.eventType),\n              gesture,\n              event,\n              stateControllers[i]\n            );\n          }\n        } else {\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            runWorklet(\n              CALLBACK_TYPE.CHANGE,\n              gesture,\n              gesture.changeEventCalculator?.(\n                event,\n                lastUpdateEvent.value[gesture.handlerTag]\n              )\n            );\n\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const event = Reanimated.useEvent(\n    callback,\n    ['onGestureHandlerStateChange', 'onGestureHandlerEvent'],\n    needsRebuild\n  );\n\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\n\ninterface GestureDetectorProps {\n  gesture?: ComposedGesture | GestureType;\n}\nexport const GestureDetector: React.FunctionComponent<GestureDetectorProps> = (\n  props\n) => {\n  const gestureConfig = props.gesture;\n  const gesture = gestureConfig?.toGestureArray?.() ?? [];\n  const useAnimated =\n    gesture.find((gesture) =>\n      gesture.handlers.isWorklet.reduce((prev, current) => prev || current)\n    ) != null;\n  const viewRef = useRef(null);\n  const firstRenderRef = useRef(true);\n  const webEventHandlersRef = useRef<WebEventHandler>({\n    onGestureHandlerEvent: (e: HandlerStateChangeEvent<unknown>) => {\n      onGestureHandlerEvent(e.nativeEvent);\n    },\n  });\n\n  const preparedGesture = React.useRef<GestureConfigReference>({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useAnimated: useAnimated,\n  }).current;\n\n  if (useAnimated !== preparedGesture.useAnimated) {\n    throw new Error(\n      'You cannot change whether you are using gesture or animatedGesture while the app is running'\n    );\n  }\n\n  // Reanimated event should be rebuilt only when gestures are reattached, otherwise\n  // config update will be enough as all necessary items are stored in shared values anyway\n  const needsToRebuildReanimatedEvent =\n    preparedGesture.firstExecution || needsToReattach(preparedGesture, gesture);\n\n  if (preparedGesture.firstExecution) {\n    gestureConfig?.initialize?.();\n  }\n\n  if (useAnimated) {\n    // Whether animatedGesture or gesture is used shouldn't change\n    // during while an app is running\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);\n  }\n\n  useEffect(() => {\n    firstRenderRef.current = true;\n    const viewTag = findNodeHandle(viewRef.current) as number;\n    attachHandlers({\n      preparedGesture,\n      gestureConfig,\n      gesture,\n      viewTag,\n      useAnimated,\n      webEventHandlersRef,\n    });\n\n    return () => {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!firstRenderRef.current) {\n      const viewTag = findNodeHandle(viewRef.current) as number;\n\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture,\n          gestureConfig,\n          gesture,\n          viewTag,\n          useAnimated,\n          webEventHandlersRef,\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n\n  if (useAnimated) {\n    return (\n      <AnimatedWrap\n        ref={viewRef}\n        onGestureHandlerEvent={preparedGesture.animatedEventHandler}>\n        {props.children}\n      </AnimatedWrap>\n    );\n  } else {\n    return <Wrap ref={viewRef}>{props.children}</Wrap>;\n  }\n};\n\nclass Wrap extends React.Component<{ onGestureHandlerEvent?: unknown }> {\n  render() {\n    // I don't think that fighting with types over such a simple function is worth it\n    // The only thing it does is add 'collapsable: false' to the child component\n    // to make sure it is in the native view hierarchy so the detector can find\n    // correct viewTag to attach to.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const child: any = React.Children.only(this.props.children);\n\n    return React.cloneElement(\n      child,\n      { collapsable: false },\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      child.props.children\n    );\n  }\n}\n\nconst AnimatedWrap = Reanimated?.default?.createAnimatedComponent(Wrap) ?? Wrap;\n"]},"metadata":{},"sourceType":"module"}