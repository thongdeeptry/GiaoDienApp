{"ast":null,"code":"import React, { useCallback, useRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { FontAwesome } from '@expo/vector-icons';\nimport { styles } from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function RoundButton(_ref) {\n  var name = _ref.name,\n      size = _ref.size,\n      color = _ref.color,\n      onPress = _ref.onPress;\n  var scale = useRef(new Animated.Value(1)).current;\n  var animateScale = useCallback(function (newValue) {\n    Animated.spring(scale, {\n      toValue: newValue,\n      friction: 4,\n      useNativeDriver: true\n    }).start();\n  }, [scale]);\n  return _jsx(TouchableWithoutFeedback, {\n    onPressIn: function onPressIn() {\n      return animateScale(0.8);\n    },\n    delayPressIn: 0,\n    onPressOut: function onPressOut() {\n      animateScale(1);\n      onPress();\n    },\n    delayPressOut: 110,\n    children: _jsx(Animated.View, {\n      style: [styles.container, {\n        transform: [{\n          scale: scale\n        }]\n      }],\n      children: _jsx(FontAwesome, {\n        name: name,\n        size: size,\n        color: color\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","useCallback","useRef","FontAwesome","styles","RoundButton","name","size","color","onPress","scale","Animated","Value","current","animateScale","newValue","spring","toValue","friction","useNativeDriver","start","container","transform"],"sources":["D:/All/DuAnTotNghiep_ReactNative/GiaoDienApp/src/layout/product/Home/RoundButton/index.js"],"sourcesContent":["import React, { useCallback, useRef } from 'react';\r\nimport { Animated, TouchableWithoutFeedback } from 'react-native';\r\nimport { FontAwesome } from '@expo/vector-icons';\r\n\r\nimport { styles } from './styles';\r\n\r\nexport default function RoundButton({ name, size, color, onPress }) {\r\n  const scale = useRef(new Animated.Value(1)).current;\r\n\r\n  const animateScale = useCallback(\r\n    (newValue) => {\r\n      Animated.spring(scale, {\r\n        toValue: newValue,\r\n        friction: 4,\r\n        useNativeDriver: true,\r\n      }).start();\r\n    },\r\n    [scale]\r\n  );\r\n\r\n  return (\r\n    <TouchableWithoutFeedback\r\n      onPressIn={() => animateScale(0.8)}\r\n      delayPressIn={0}\r\n      onPressOut={() => {\r\n        animateScale(1);\r\n        onPress();\r\n      }}\r\n      delayPressOut={110}\r\n    >\r\n      <Animated.View style={[styles.container, { transform: [{ scale }] }]}>\r\n        <FontAwesome name={name} size={size} color={color} />\r\n      </Animated.View>\r\n    </TouchableWithoutFeedback>\r\n  );\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,MAA7B,QAA2C,OAA3C;;;AAEA,SAASC,WAAT,QAA4B,oBAA5B;AAEA,SAASC,MAAT;;AAEA,eAAe,SAASC,WAAT,OAAqD;EAAA,IAA9BC,IAA8B,QAA9BA,IAA8B;EAAA,IAAxBC,IAAwB,QAAxBA,IAAwB;EAAA,IAAlBC,KAAkB,QAAlBA,KAAkB;EAAA,IAAXC,OAAW,QAAXA,OAAW;EAClE,IAAMC,KAAK,GAAGR,MAAM,CAAC,IAAIS,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BC,OAA5C;EAEA,IAAMC,YAAY,GAAGb,WAAW,CAC9B,UAACc,QAAD,EAAc;IACZJ,QAAQ,CAACK,MAAT,CAAgBN,KAAhB,EAAuB;MACrBO,OAAO,EAAEF,QADY;MAErBG,QAAQ,EAAE,CAFW;MAGrBC,eAAe,EAAE;IAHI,CAAvB,EAIGC,KAJH;EAKD,CAP6B,EAQ9B,CAACV,KAAD,CAR8B,CAAhC;EAWA,OACE,KAAC,wBAAD;IACE,SAAS,EAAE;MAAA,OAAMI,YAAY,CAAC,GAAD,CAAlB;IAAA,CADb;IAEE,YAAY,EAAE,CAFhB;IAGE,UAAU,EAAE,sBAAM;MAChBA,YAAY,CAAC,CAAD,CAAZ;MACAL,OAAO;IACR,CANH;IAOE,aAAa,EAAE,GAPjB;IAAA,UASE,KAAC,QAAD,CAAU,IAAV;MAAe,KAAK,EAAE,CAACL,MAAM,CAACiB,SAAR,EAAmB;QAAEC,SAAS,EAAE,CAAC;UAAEZ,KAAK,EAALA;QAAF,CAAD;MAAb,CAAnB,CAAtB;MAAA,UACE,KAAC,WAAD;QAAa,IAAI,EAAEJ,IAAnB;QAAyB,IAAI,EAAEC,IAA/B;QAAqC,KAAK,EAAEC;MAA5C;IADF;EATF,EADF;AAeD"},"metadata":{},"sourceType":"module"}