{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport ReactNative from \"react-native-web/dist/index\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { childrenWithOverriddenStyle } from \"./utils\";\nimport { getViewManagerConfig, PagerViewViewManager } from \"./PagerViewNative\";\nexport var PagerView = function (_React$Component) {\n  _inherits(PagerView, _React$Component);\n\n  var _super = _createSuper(PagerView);\n\n  function PagerView() {\n    var _this;\n\n    _classCallCheck(this, PagerView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"isScrolling\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"PagerView\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"getInnerViewNode\", function () {\n      return _this.PagerView.current.getInnerViewNode();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onPageScroll\", function (e) {\n      if (_this.props.onPageScroll) {\n        _this.props.onPageScroll(e);\n      }\n\n      if (Platform.OS === 'android') {\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onPageScrollStateChanged\", function (e) {\n      if (_this.props.onPageScrollStateChanged) {\n        _this.props.onPageScrollStateChanged(e);\n      }\n\n      _this.isScrolling = e.nativeEvent.pageScrollState === 'dragging';\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onPageSelected\", function (e) {\n      if (_this.props.onPageSelected) {\n        _this.props.onPageSelected(e);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPage\", function (selectedPage) {\n      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_assertThisInitialized(_this)), getViewManagerConfig().Commands.setPage, [selectedPage]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPageWithoutAnimation\", function (selectedPage) {\n      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_assertThisInitialized(_this)), getViewManagerConfig().Commands.setPageWithoutAnimation, [selectedPage]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setScrollEnabled\", function (scrollEnabled) {\n      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_assertThisInitialized(_this)), getViewManagerConfig().Commands.setScrollEnabled, [scrollEnabled]);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onMoveShouldSetResponderCapture\", function () {\n      return _this.isScrolling;\n    });\n\n    return _this;\n  }\n\n  _createClass(PagerView, [{\n    key: \"deducedLayoutDirection\",\n    get: function get() {\n      var shouldUseDeviceRtlSetup = !this.props.layoutDirection || this.props.layoutDirection === 'locale';\n\n      if (shouldUseDeviceRtlSetup) {\n        return I18nManager.isRTL ? 'rtl' : 'ltr';\n      } else {\n        return this.props.layoutDirection;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(PagerViewViewManager, _extends({}, this.props, {\n        ref: this.PagerView,\n        style: this.props.style,\n        layoutDirection: this.deducedLayoutDirection,\n        onPageScroll: this._onPageScroll,\n        onPageScrollStateChanged: this._onPageScrollStateChanged,\n        onPageSelected: this._onPageSelected,\n        onMoveShouldSetResponderCapture: this._onMoveShouldSetResponderCapture,\n        children: childrenWithOverriddenStyle(this.props.children)\n      }));\n    }\n  }]);\n\n  return PagerView;\n}(React.Component);","map":{"version":3,"mappings":"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","names":["React","ReactNative","childrenWithOverriddenStyle","getViewManagerConfig","PagerViewViewManager","PagerView","args","_defineProperty","createRef","current","getInnerViewNode","e","props","onPageScroll","Platform","OS","keyboardDismissMode","Keyboard","dismiss","onPageScrollStateChanged","isScrolling","nativeEvent","pageScrollState","onPageSelected","selectedPage","UIManager","dispatchViewManagerCommand","findNodeHandle","Commands","setPage","setPageWithoutAnimation","scrollEnabled","setScrollEnabled","shouldUseDeviceRtlSetup","layoutDirection","I18nManager","isRTL","render","ref","style","deducedLayoutDirection","_onPageScroll","_onPageScrollStateChanged","_onPageSelected","onMoveShouldSetResponderCapture","_onMoveShouldSetResponderCapture","children","Component"],"sources":["PagerView.tsx"],"sourcesContent":["import React, { ReactElement } from 'react';\nimport { Platform, UIManager, Keyboard } from 'react-native';\nimport ReactNative, { I18nManager } from 'react-native';\nimport type {\n  PagerViewOnPageScrollEvent,\n  PagerViewOnPageSelectedEvent,\n  PageScrollStateChangedNativeEvent,\n  PagerViewProps,\n} from './types';\n\nimport { childrenWithOverriddenStyle } from './utils';\nimport { getViewManagerConfig, PagerViewViewManager } from './PagerViewNative';\n\n/**\n * Container that allows to flip left and right between child views. Each\n * child view of the `PagerView` will be treated as a separate page\n * and will be stretched to fill the `PagerView`.\n *\n * It is important all children are `<View>`s and not composite components.\n * You can set style properties like `padding` or `backgroundColor` for each\n * child. It is also important that each child have a `key` prop.\n *\n * Example:\n *\n * ```\n * render: function() {\n *   return (\n *     <PagerView\n *       style={styles.PagerView}\n *       initialPage={0}>\n *       <View style={styles.pageStyle} key=\"1\">\n *         <Text>First page</Text>\n *       </View>\n *       <View style={styles.pageStyle} key=\"2\">\n *         <Text>Second page</Text>\n *       </View>\n *     </PagerView>\n *   );\n * }\n *\n * ...\n *\n * var styles = {\n *   ...\n *   PagerView: {\n *     flex: 1\n *   },\n *   pageStyle: {\n *     alignItems: 'center',\n *     padding: 20,\n *   }\n * }\n * ```\n */\n\nexport class PagerView extends React.Component<PagerViewProps> {\n  private isScrolling = false;\n  private PagerView = React.createRef<typeof PagerViewViewManager>();\n\n  public getInnerViewNode = (): ReactElement => {\n    return this.PagerView.current!.getInnerViewNode();\n  };\n\n  private _onPageScroll = (e: PagerViewOnPageScrollEvent) => {\n    if (this.props.onPageScroll) {\n      this.props.onPageScroll(e);\n    }\n    // Not implemented on iOS yet\n    if (Platform.OS === 'android') {\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n    }\n  };\n\n  private _onPageScrollStateChanged = (\n    e: PageScrollStateChangedNativeEvent\n  ) => {\n    if (this.props.onPageScrollStateChanged) {\n      this.props.onPageScrollStateChanged(e);\n    }\n    this.isScrolling = e.nativeEvent.pageScrollState === 'dragging';\n  };\n\n  private _onPageSelected = (e: PagerViewOnPageSelectedEvent) => {\n    if (this.props.onPageSelected) {\n      this.props.onPageSelected(e);\n    }\n  };\n\n  /**\n   * A helper function to scroll to a specific page in the PagerView.\n   * The transition between pages will be animated.\n   */\n  public setPage = (selectedPage: number) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      getViewManagerConfig().Commands.setPage,\n      [selectedPage]\n    );\n  };\n\n  /**\n   * A helper function to scroll to a specific page in the PagerView.\n   * The transition between pages will *not* be animated.\n   */\n  public setPageWithoutAnimation = (selectedPage: number) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      getViewManagerConfig().Commands.setPageWithoutAnimation,\n      [selectedPage]\n    );\n  };\n\n  /**\n   * A helper function to enable/disable scroll imperatively\n   * The recommended way is using the scrollEnabled prop, however, there might be a case where a\n   * imperative solution is more useful (e.g. for not blocking an animation)\n   */\n  public setScrollEnabled = (scrollEnabled: boolean) => {\n    UIManager.dispatchViewManagerCommand(\n      ReactNative.findNodeHandle(this),\n      getViewManagerConfig().Commands.setScrollEnabled,\n      [scrollEnabled]\n    );\n  };\n\n  private _onMoveShouldSetResponderCapture = () => {\n    return this.isScrolling;\n  };\n\n  private get deducedLayoutDirection() {\n    const shouldUseDeviceRtlSetup =\n      !this.props.layoutDirection || this.props.layoutDirection === 'locale';\n\n    if (shouldUseDeviceRtlSetup) {\n      return I18nManager.isRTL ? 'rtl' : 'ltr';\n    } else {\n      return this.props.layoutDirection;\n    }\n  }\n\n  render() {\n    return (\n      <PagerViewViewManager\n        {...this.props}\n        ref={this.PagerView as any /** TODO: Fix ref type */}\n        style={this.props.style}\n        layoutDirection={this.deducedLayoutDirection}\n        onPageScroll={this._onPageScroll}\n        onPageScrollStateChanged={this._onPageScrollStateChanged}\n        onPageSelected={this._onPageSelected}\n        onMoveShouldSetResponderCapture={this._onMoveShouldSetResponderCapture}\n        children={childrenWithOverriddenStyle(this.props.children)}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}